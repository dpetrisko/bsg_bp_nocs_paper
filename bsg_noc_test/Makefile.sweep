
# Constrain number of cores. kkx has 512
export DC_NUM_CORES   :=4
export ICC2_NUM_CORES :=4

# Runs an individual target
# This subsitutes the parameters given in sweep@param1@param2@param3... format
# These parameters are substituted in bsg_chip_pkg, which is used to parameterize bsg_chip.
# 
# Each experiment is run in a separate bsg_14 directory with a tag based on the parameterization
# Synthesis, dp and pnr will be done for the experiment
sweep@%:
	# Extract parameter from makefile target
	$(eval NETWORK    := $(word 1,$(subst @,  ,$*)))
	$(eval DIM        := $(word 2,$(subst @,  ,$*)))
	$(eval FLIT_WIDTH := $(word 3,$(subst @,  ,$*)))
	$(eval SIDE       := $(word 4,$(subst @,  ,$*)))
	# Create a unit tag for the configuration, don't tag area
	$(eval TAG := $(NETWORK).$(DIM).$(FLIT_WIDTH).$(subst .,-,$(SIDE)))
	$(eval BSG_14_DIR := bsg_14.$(TAG))

	# Create bsg_14 directory if it doesn't exist
	@echo "Creating new bsg_14 directory"
	if [ -d $(BSG_14_DIR) ]; then echo "$(BSG_14_DIR) exists"; else cp -r bsg_14/ $(BSG_14_DIR); fi
	sed -i "s/bsg_ac_black_parrot_quad_core_rc3/bsg_noc_test/g" $(BSG_14_DIR)/Makefile.include
	cd $(BSG_14_DIR); $(MAKE) new_build

	@echo "Generating sweep-specific configuration package"
	cp v/bsg_chip_pkg.v $(BSG_14_DIR)/bsg_chip_pkg.v
	sed -i "s/BSG_NETWORKS/$(NETWORK)/g" $(BSG_14_DIR)/bsg_chip_pkg.v
	sed -i "s/BSG_DIMS/$(DIM)/g" $(BSG_14_DIR)/bsg_chip_pkg.v
	sed -i "s/BSG_FLIT_WIDTH/$(FLIT_WIDTH)/g" $(BSG_14_DIR)/bsg_chip_pkg.v

	# Do synth
	@echo "Starting synthesis runs"
	cd $(BSG_14_DIR); time $(MAKE) SIDE=$(SIDE) synth > do_synth.$(TAG).log
	@echo "Starting dp run"
	cd $(BSG_14_DIR); time $(MAKE) SIDE=$(SIDE) dp > do_dp.$(TAG).log
	@echo "Starting pnr run"
	cd $(BSG_14_DIR); time $(MAKE) SIDE=$(SIDE) pnr > do_pnr.$(TAG).log

# Generates a stats.csv file based on the current_build in each bsg_14 subdirectory
stats:
	./stats.py | tee stats.csv

# A list of targets to run
# networks @ dims @ flit_width @ num_aux @ aux_type @ aux_width @ aux_els
# If a sweep is performed without a target list, we error out
DEFAULT_TARGETS := none
TARGETS ?= DEFAULT_TARGETS
$(DEFAULT_TARGETS):
	@echo "ERROR: Must select sweep TARGETS= from: ROUTER_TARGETS"

UTIL_TARGETS := \
	sweep@1@2@32@29.696  sweep@1@2@64@39.04 \
	sweep@1@2@96@46.592  sweep@1@2@128@52.992 \
	sweep@1@2@256@73.472 sweep@1@2@512@132.096 \
	\
	sweep@1@2@32@30.6  sweep@1@2@64@40.3 \
	sweep@1@2@96@48.1  sweep@1@2@128@54.8 \
	sweep@1@2@256@76.0 sweep@1@2@512@132.1 \

LOW_UTIL_TARGETS := \
	sweep@1@2@32@30.72 \
	sweep@1@2@64@40.448 \
	sweep@1@2@96@48.256 \
	sweep@1@2@128@54.912 \
	sweep@1@2@256@76.032 \

ROUTER_TARGETS := \
	sweep@1@2@32@28.672 \
	sweep@1@2@64@37.76 \
	sweep@1@2@96@45.056 \
	sweep@1@2@128@51.328 \
	sweep@1@2@256@71.168 \
	sweep@1@2@288@75.264 \
	sweep@1@2@320@82.944 \
	sweep@1@2@352@91.136 \
	sweep@1@2@384@99.328 \
	sweep@1@2@416@107.52 \
	sweep@1@2@448@115.712 \
	sweep@1@2@480@123.904 \
	sweep@1@2@512@132.096 \
	sweep@1@2@640@164.864 \
	sweep@1@2@768@197.632 \
	sweep@1@2@896@230.4 \
	sweep@1@2@1024@263.168 \
	sweep@1@2@1532@393.216 \
	sweep@1@2@2048@525.312 \
	sweep@1@2@3072@787.456 \
	sweep@1@2@4096@1049.6 \

LARGE_TARGETS := \
	sweep@1@2@640@164.864  sweep@1@2@768@197.6322 \
	sweep@1@2@896@230.4    sweep@1@2@1024@263.168 \
	sweep@1@2@1532@393.216 sweep@1@2@2048@525.312 \
	sweep@1@2@3072@787.456 sweep@1@2@4096@1049.6 \

INFLECTION_TARGETS := \
	sweep@1@2@288@75.264 sweep@1@2@320@82.944 \
	sweep@1@2@352@91.136 sweep@1@2@384@99.328 \
	sweep@1@2@416@107.52 sweep@1@2@448@115.712 \
	sweep@1@2@480@123.904

# make sweep will run a set of experiments based on the list in TARGETS. Because
# each pnr run takes ~10 cores, it's not recommended to run with -j > 3 on kk machines
# Defaults to erroring out for sweep called without targets
sweep: $($(TARGETS))
clean_sweep:
	rm -rf bsg_14.*/build.2020*

# save_results will save all subdirectories' current_build folder to the tag name
# example: make save_results SAVE_AS=single_track : current_build -> build.single_track
# if save_results is called without a SAVE_AS, we error out
SAVE_AS ?=
SAVE_SUBDIRS := $(addprefix save., $(wildcard bsg_14.*/))
save_results: $(SAVE_SUBDIRS)
save.%:
	@if [ -z "$(SAVE_AS)" ]; then echo "Error: set SAVE_AS"; exit 1; fi
	cd $*; make rename_build.$(SAVE_AS)

# load_results will restore all subdirectories' current_build folder from the tag name
# example: make load_results LOAD_AS=single_track : current_build <- build.single_track
# if load_results is called without a LOAD_AS, we error out
LOAD_AS ?=
LOAD_SUBDIRS := $(addprefix load., $(wildcard bsg_14.*/))
load_results: $(LOAD_SUBDIRS)
load.%:
	@if [ -z "$(LOAD_AS)" ]; then echo "Error: set LOAD_AS"; exit 1; fi
	cd $*; make link_build.$(LOAD_AS)

